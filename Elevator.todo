Do Next:
	☐	Ok, so I need to get back into the swing of things. My idea is to start implementing the bid system with a blank slate on the lowest level. I can bring in chunks of code as needed.

	☐	I could create a 'dibs' system where each elevator puts in a bid and the closest one wins.  And elevators bid high or low depending on how close they are and how full they are. I wonder how well that would work?
		☐	when a direction button is pressed, I request bids from each elevator
		☐	each elevator analyzes its current status and submits a bid
			☐	if the elevator is already going to the floor, it bids the highest: 100
			☐	if the elevator has an urgent responsibility and can't stop, it bids low - like 5 or something
			☐	if the floor is on the way to where the elevator is already going and it has time and space to spare, it will bid medium, depending on how close it is I suppose.
			☐	I guess there's the question of whether the elevator interrupts the current destination or adds it to the end of the line
			☐	and do I want to have the queue pile up or keep it simple?
			☐	but maybe it would be better to cross these bridges when I come to them
		☐	hmm, or maybe I calculate the time it would take and submit that... but that sounds difficult
		☐	then I compare the bids and notify the highest bidder
		☐	the "winner" adds the floor to their plans in whatever way makes sense 

Behavior Problems:
	☐	the wait time is too long for challenge 13
		☐	wait time is the total time until they get to the floor they want
		☐	what happens is a bunch of people pile into an elevator and then it takes too long for them all to get off
		☐	so the sooner they get off, the better
	☐	A person was in the elevator wanting seven and the elevator went up to six but then went down.  Why didn't it go to seven first? Or next?
	☐ An elevator was passing by a floor with a person on it, but it skipped because a different elevator had already claimed the floor - but that other elevator was already far away.

Times:
		☐	1.314 to go to an adjacent floor
		☐	1.862 to go two floors away
		☐	1.000 for another person to get on at the last minute (more or less)
		☐	how long to go x floors away?
		☐	how long at a typical stop?

Blog Ideas:
	☐	Callback functions
	☐	Making code dry
	☐	Readability over brevity
	☐	Recursion
	☐	The idle function not behaving as expected (dig into the source code to try and diagnose it)
	☐	Github
	☐	Using the console to trouble-shoot
	☐	Using jshint
	☐	Infinite loops
	☐	Getting basic code set up
	☐	Managing complex/long code
	☐	






Future:
	☐	Try lowering the load threshold.
		☐	where is the load threshold at anyway? Do the elevators get full?
		☐	I could give each elevator its own load threshold and see what happens with different settings.
		☐	But I don't know if that would change things anyway. People keep getting on as long as the elevator is there
		☐	Well, as long as it has the light on. So I could turn off the indicator when the elevator gets "too full"
	☐	Record time of floor button presses
	☐	Pass that time into whichever elevator responds to the request, so that it can calculate the urgency of the floor button presses more precisely
	☐	I could make a separate place to keep track of the floors that elevators are going to - and when they get to a floor, they can clear it from both that list and from the buttons list.
	☐	test if each person pushes the button or just the first person
	☐	Maybe I want to take the sequencing logic out of the position object, so that I can have multiple different versions (maybe some elevators try going down first, etc.)
	☐	maybe every elevator can just have a floor and a heading...
		☐	a stopped elevator has a current floor and a "destination" heading.
		☐	a moving elevator has an origin floor, a destination floor and a current heading.  But it might also have a "destination" heading if it intends to change direction when it reaches the destination floor.
	☐	give each elevator it's own load threshold based on capacity
	☐	Make a way for the elevators to communicate with each other and work together.
















＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
	✔	does it matter how far away the elevator is? should I take walk time into consideration and design my farther away elevators differently? @done (18-05-11 09:36) @project(Times)
	✔	The elevator can track how long it's been since a person pushed an elevator button.  It can clear out the count once it gets to that floor. @done (18-05-11 01:14) @project(Behavior Problems)
	✔	I'm trying to track time, but I don't know how to track in-game time.  Because if it gets sped up or if I pause it, then my timer gets thrown off, and I don't know how to sense those things. So I suppose I could just always run at 1x speed if I want to track time perfectly... @done (18-05-11 01:14) @project(Behavior Problems)
	✔	but elevator button presses seem trickier, because I don't know the exact time someone gets on. @done (18-05-11 01:09) @project(Behavior Problems)  
	✔	That way the elevator will be able to tell at any time which floor is the most urgent. @done (18-05-11 01:09) @project(Behavior Problems)
	✔	Record a timestamp when a new one is pressed @done (18-05-11 01:09) @project(Behavior Problems)
	✔	Oh wait, there is an event for that! :). So I'd have to keep track of the buttons already pressed @done (18-05-11 01:09) @project(Behavior Problems)
	✔	Clear it all out when the elevator stops at that floor. @done (18-05-11 01:09) @project(Behavior Problems)  
	✔	I have to figure out how to use time stamps in JavaScript. @done (18-05-10 22:34) @project(Behavior Problems)
	✔	test this: I could try having the elevator switch to the down position if it tries everything and comes back empty. It won't fix everything but it will at least make it easier to load. Maybe it can just turn on the down light and be at both, in case it's on the bottom floor. @done (18-05-10 20:51) @project(Future)
	✔	have the elevator go to the highest floor button pressed, only stopping for people going up?  And then come down, so it can pick people up and drop them off in one stop? @done (18-05-10 20:47) @project(Do next)
	✔	This might make the wait too long for people who are on their way up, if the elevators are all too full to pick them up... @done (18-05-10 20:47) @project(Do next)
	✔	I could have them stop if the button inside is pressed, even if they are otherwise too full... I love this game :) @done (18-05-10 20:47) @project(Do next)
	✔	maybe most of the elevators should only go up as far as their passengers want, and then they go back down, picking people up along the way... @done (18-05-10 20:46) @project(Behavior Problems)
	✔	maybe elevators get stuck when they somehow have a destination but don't go to it? So they're never idling? @done (18-05-10 20:46) @project(Behavior Problems)
	✔	it happens at the beginning; the elevators wait for people to get in before they move @done (18-05-10 20:46) @project(Behavior Problems)
	✔	it doesn't seem to happen every time. @done (18-05-10 20:46) @project(Behavior Problems)
	✔	empty elevators get stuck when going up - they only move when a person gets in, not when a person wants to go up or down from a floor @done (18-05-10 20:46) @project(Behavior Problems)
	✔	does this happen every time? Does it ever happen to an elevator going down? @done (18-05-10 20:46) @project(Behavior Problems)
	✔	I have no way to differentiate between elevators and designate certain ones to behave in a certain way @done (18-05-10 20:46) @project(Behavior Problems)
	✔	It had people in it who wanted to go to zero, but it went up instead to pick more people up... which is okay I guess but seems like it could get slow. @done (18-05-10 17:06) @project(Behavior Problems)
	✔	Doesn't take people up to five sometimes @done (18-05-10 17:06) @project(Behavior Problems)
	✔	Test old version on challenge 5; maybe I only passed by luck before. @done (18-05-10 15:29) @project(Do next)
	✔	Now I'm failing challenge 5! :( 3 out of 4 times. I'm pretty close, but I don't know what changed. @done (18-05-10 15:29) @project(Behavior Problems)
	✔	put in comments to try to diagnose the stuck elevator problem @done (18-05-10 15:19) @project(Do next)
	✔	add elevator number @done (18-05-10 15:19) @project(Do next)
	✔	I could have the floor buttons request an elevator somehow... @done (18-05-10 15:19) @project(Do next)
	✔	make a wrapper for the elevator object that stores an elevator number and calls the elevator functions @done (18-05-09 13:58) @project(Do next)
	✔	So the elevators idle, but then they stop. They don't keep doing the idle thing. @done (18-05-09 13:58) @project(Do next)
	✔	I can make chatty an elevator attribute, so I can track only one elevator and hope it gets stuck... @done (18-05-09 13:58) @project(Do next)
	✔ Problem: the idle function gets passed into the elevator object, which doesn't have access to the controller methods. @done (18-05-09 13:45) @project(Do next)
	✔	So only the first elevator said stuff at the beginning, but when I told them all to go up, they all talked.  But they're not supposed to be chatty!  How did they come to be chatty? @done (18-05-09 13:45) @project(Do next)
	✔	Looks like it worked! :D @done (18-05-09 13:45) @project(Do next)
	✔	I could try passing the whole controller in - is that recursive? Would it break something? @done (18-05-09 13:45) @project(Do next)
	✔	Hah, I had a global say function :P @done (18-05-09 13:45) @project(Do next)
	✔	okay, so I have a floorsWanted array but it doesn't even do anything right now. I think I could just take it out completely. @done (18-05-09 12:08) @project(Do next)
	✔	get rid of the floorsWanted array @done (18-05-09 12:07) @project(Do next)
	✔	the elevator waits for a person to get in instead of going to get more people @done (18-05-08 19:08) @project(Behavior Problems)
	✔	the elevator gets full but keeps trying to pick people up @done (18-05-08 19:07) @project(Behavior Problems)
	✔	the elevator gets stuck when the floor it is on has people who want to get on, but it is full. @done (18-05-06 22:56) @project(Behavior Problems)
	✔	the elevator stops on an up trip at a floor where the people want to go down @done (18-05-06 21:14) @project(Behavior Problems)
	✔	have tryFloor check if the elevator is loaded @done (18-05-06 21:14) @project(Do next)
	✔	Make a function to check if the elevator is fully loaded or not @done (18-05-06 21:14) @project(Do next)
	✔	have tryFloor check if the elevator is wanted for up or for down @done (18-05-06 20:33) @project(Do next)
	✔ indicateUp: @done (18-05-06 19:08)
	✔	get the timing right on the indicators so people get on @done (18-05-06 19:08) @project(Loading)
	✔	change the go function so it takes a position instead of a floor @done (18-05-06 19:08) @project(Do next)
	✔	Update elevator indicators to match new position @done (18-05-06 19:08) @project(Do next)
	✔	the elevator gets stuck on the top floor because it doesn't turn off its up status light @done (18-05-06 19:07) @project(Behavior Problems)
	✔	the elevator doesn't use the down status light even when it gets to the top floor @done (18-05-06 19:07) @project(Behavior Problems)
	✔	incorporate position logic into tryFloors @done (18-05-06 18:24) @project(Do next)
	✔	Make tryFloor do nothing if the position matches the current position @done (18-05-06 18:24) @project(Do next)
	✔	I could make a position object that contains a floor number and a direction @done (18-05-06 16:32) @project(Do next)
	✔	I can make a function called "nextFloorNum" that returns the proper floor num given the current (or any) floor @done (18-05-06 16:21) @project(tryFloor)
	✔ for each floor, store a set of values: {elevator: true, up: true, down: false} @done (18-05-04 17:49) @project(tryFloor)
	✔ Open Questions: @done (18-05-04 17:49)
	✔ Buttons Array: @done (18-05-04 17:49)
	✔	if the elevator button is pressed, go to the floor @done (18-05-04 17:49) @project(tryFloor)
	✔	have the events change them and the elevator change them @done (18-05-04 17:49) @project(tryFloor)
	✔	check syntax @done (18-05-04 17:49) @project(tryFloor)
	✔	What should the idle event be? @done (18-05-04 17:49) @project(tryFloor)
	✔ new logic: set up and down indicator and use to track elevator intent @done (18-05-04 12:23)
